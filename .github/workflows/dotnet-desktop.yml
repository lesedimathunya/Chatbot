name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: MyProject.sln  # üîπ Replace with actual solution file
      Test_Project_Path: MyProject.Tests/MyProject.Tests.csproj  # üîπ Replace with actual test project path
      Wap_Project_Directory: MyProject.Package  # üîπ Replace with actual WAP directory
      Wap_Project_Path: MyProject.Package/MyProject.Package.wapproj  # üîπ Replace with actual WAP project path

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Debug - List Files in Repo
      run: ls -R  # üîπ Check if solution and test project files exist

    # Install .NET SDK
    - name: Install .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add MSBuild to PATH
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore Dependencies
    - name: Restore the Application
      run: dotnet restore ${{ env.Solution_Name }}
      env:
        Configuration: ${{ matrix.configuration }}

    # Run Unit Tests (with check for missing file)
    - name: Run Unit Tests
      run: |
        if [ -f "${{ env.Test_Project_Path }}" ]; then
          dotnet test ${{ env.Test_Project_Path }}
        else
          echo "‚ùå Test project file not found: ${{ env.Test_Project_Path }}"
          exit 1
        fi

    # Decode the Base64-encoded PFX certificate
    - name: Decode the PFX Certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Build and Package the Windows Application Packaging (WAP) Project
    - name: Create the App Package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove PFX Certificate After Use
    - name: Remove PFX Certificate
      run: Remove-Item -Path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload Build Artifacts (MSIX Package)
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
